id: from_staging_to_transformed
namespace: qr_art_gallery

variables:
  table: "metropolitan_qr_urls"


tasks:



  - id: select_urls
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      SELECT
        md5id, objectID, objectURL, primaryImageSmall
      FROM  
      `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan`
    fetch: true
    disabled: false
    
  
  - id: generate_qr_code_task
    type: io.kestra.plugin.scripts.python.Script
    warningOnStdErr: false
    beforeCommands:
      - printf '%s' '{{ kv("GCP_CREDS") }}' > /tmp/creds.json
      - pip install pandas qrcode google-cloud-storage Pillow fastparquet numpy
    script: |
      import pandas as pd
      import qrcode
      import os
      from google.cloud import storage
      from io import BytesIO
      import json
      from google.oauth2 import service_account
      import datetime
      import numpy as np


      current_time = datetime.datetime.utcnow()
      weekday = current_time.weekday()

      df_request = pd.read_json(f"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds")
      object_ids_list = df_request["objectIDs"].tolist()
      objects_weekly_split = np.array_split(object_ids_list,7)
      todays_objects = objects_weekly_split[weekday].tolist()

      with open("/tmp/creds.json") as f:
        gcp_svc_info = json.load(f)

      data = json.loads("""{{ outputs.select_urls["rows"] }}""")
      df = pd.DataFrame(data)
      df = df[df["objectID"].isin(todays_objects)]

      credentials = service_account.Credentials.from_service_account_info(gcp_svc_info)

      client = storage.Client(credentials=credentials, project="{{ kv('GCP_PROJECT_ID') }}")
      bucket_name = "{{ kv('GCP_BUCKET_NAME')}}"
      bucket = client.bucket("{{ kv('GCP_BUCKET_NAME') }}")

      existing_qr_blobs = client.list_blobs(bucket.name, prefix="qr_codes/")
      existing_qr_ids = {blob.name.split("/")[-1].replace(".png", "") for blob in existing_qr_blobs}

      def generate_qr_and_upload(row):
        object_id_str = str(row["objectID"])
        if object_id_str in existing_qr_ids:
          return f"gs://{bucket_name}/qr_codes/{object_id_str}.png"

        qr = qrcode.make(row["objectURL"])
        img_buffer = BytesIO()
        qr.save(img_buffer)
        img_buffer.seek(0)

        blob_path = f"qr_codes/{object_id_str}.png"
        blob = bucket.blob(blob_path)
        blob.upload_from_file(img_buffer, content_type="image/png")

        return f"gs://{bucket_name}/{blob_path}"


      df["objectQr"] = df.apply(generate_qr_and_upload, axis=1)
      df.to_parquet("highlighted_with_qr.parquet", engine="fastparquet", index=False)
    outputFiles:
    - highlighted_with_qr.parquet
    disabled: true




  - id: generate_clusters
    type: io.kestra.plugin.scripts.python.Script
    warningOnStdErr: false
    beforeCommands:
      - printf '%s' '{{ kv("GCP_CREDS") }}' > /tmp/creds.json
      - pip install numpy pandas Pillow scikit-learn aiolimiter dlt httpx numpy
    script: |
      from PIL import Image
      import numpy as np
      import io
      from sklearn.cluster import MiniBatchKMeans
      from aiolimiter import AsyncLimiter
      import dlt
      import httpx

      current_time = datetime.datetime.utcnow()
      weekday = current_time.weekday()

      df_request = pd.read_json(f"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds")
      object_ids_list = df_request["objectIDs"].tolist()
      objects_weekly_split = np.array_split(object_ids_list,7)
      todays_objects = objects_weekly_split[weekday].tolist()


      data = json.loads("""{{ outputs.select_urls["rows"] }}""")
      pandas_df = pd.DataFrame(data)
      pandas_df = pandas_df[pandas_df["objectID"].isin(todays_objects)]


      small_images = pandas_df[["md5_id", "objectID", "primaryImageSmall"]]
      small_images = small_images[small_images["primaryImageSmall"].str.strip() != ""]
      small_images_dicts = [{
              "objectID": row["objectID"],
              "md5id": row["md5id"],
              "url": row["primaryImageSmall"]
          }
          for idx, row in small_images.iterrows()
      ]


      limiter = AsyncLimiter(max_rate=70, time_period=1)

      @dlt.transformer
      async def get_images(dict_entry):
        async with limiter:
          async with httpx.AsyncClient() as client:
              r = await client.get(dict_entry["url"])
              img = Image.open(io.BytesIO(r.content)).convert("RGB")
              img_array = np.array(img)
              return {
                      "objectID": dict_entry["objectID"],
                      "md5id": dict_entry["md5id"],
                      "primaryImageSmall": dict_entry["url"],
                      "image_array": img_array
                  }

      pixels = list( [i for i in small_images_dicts] | get_images())


      def get_clusters(entry, n_clusters = 5):
        img_array = entry["image_array"]
        objectID = entry["objectID"]
        primaryImageSmall = entry["primaryImageSmall"]
        md5id = entry["md5id"]

        img_array = img_array.reshape(-1,3) / 255.0

        kmeans = MiniBatchKMeans(n_clusters = n_clusters)
        labels = kmeans.fit_predict(img_array)
        centroids =  kmeans.cluster_centers_
        proportions = np.bincount(labels, minlength=n_clusters) / len(labels)
        counts = np.bincount(labels)
        return {"objectID": objectID, 
                "md5id": md5id,
                "primaryImageSmall": primaryImageSmall,
                "rgbColorCentroids": centroids.tolist(), 
                "colorLabelProportions": proportions.tolist(), 
                "colorLabelCounts": counts.tolist()}

      clusters = list(map(get_clusters, pixels))
      images_df = pd.DataFrame(clusters)
      images_df.to_parquet("clusters.parquet", engine="fastparquet", index=False)
    outputFiles:
    - clusters.parquet
    disabled: true


  - id: table_clusters_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{ kv('GCP_PROJECT_ID') }}.qr_art_gallery_transformed.metropolitan_color_clusters`
        (objectID STRING,
        md5id STRING,
        primaryImageSmall STRING,
        rgbColorCentroids ARRAY<ARRAY<FLOAT64>>,
        colorLabelProportions ARRAY<FLOAT64>,
        colorLabelCounts ARRAY<INT64>
        )
        OPTIONS (format = 'parquet',
              uris = ['{{ outputs.generate_clusters.outputFiles['clusters.parquet'] }}']);
    disabled: true




  - id: git
    type: io.kestra.plugin.core.flow.WorkingDirectory
    tasks:
    - id: clone_repository
      type: io.kestra.plugin.git.Clone
      url: https://github.com/rmengato/qr-art-gallery
      branch: dbt_add

    - id: dbt
      type: io.kestra.plugin.dbt.cli.DbtCLI
      inputFiles:
        sa.json: "{{ kv('GCP_CREDS') }}"
      taskRunner:
        type: io.kestra.plugin.scripts.runner.docker.Docker
      containerImage: ghcr.io/kestra-io/dbt-bigquery:latest
      profiles: |
        my-dbt-project:
          outputs:
            dev:
              type: bigquery
              method: service-account
              project: "{{ kv('GCP_PROJECT_ID')}}"
              dataset: "qr_art_gallery_raw"
              location: "{{ kv('GCP_LOCATION')}}"
              keyfile: sa.json
              threads: 16
              priority: interactive
              timeout_seconds: 300
              fixed_retries: 1
          target: dev
      commands:
        - dbt deps
        - dbt build --full-refresh
    disabled: true




  - id: table_highlights_with_qr_temp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{ kv('GCP_PROJECT_ID') }}.qr_art_gallery_transformed.metropolitan_qr_urls_temp`
        (objectID STRING,
         objectURL STRING,
         objectQR STRING
        )
        OPTIONS (format = 'parquet',
              uris = ['{{ outputs.generate_qr_code_task }}']);
    disabled: true


  

 

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false


pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{ kv('GCP_CREDS') }}"
      projectId: "{{ kv('GCP_PROJECT_ID') }}"
      location: "{{ kv('GCP_LOCATION') }}"
      bucket: "{{ kv('GCP_BUCKET_NAME') }}"


triggers:  
  - id: upstream_dependency    
    type: io.kestra.plugin.core.trigger.Flow    
    preconditions:      
      id: flow_trigger      
      flows:        
        - namespace: qr_art_gallery          
          flowId: from_bucket_to_staging          
          states: [SUCCESS]


      