id: from_bucket_to_staging
namespace: qr_art_gallery
description: |
  Extracts data from the Metropolitan Museum of NY API loaded into GCS bucket and moves it into staging table in BigQuery


variables:
  file: "metropolitan_{{ execution.startDate | date('EEE') }}_{{ execution.startDate | date('yyyy-MM-dd') }}.parquet"
  gcs_file: "gs://{{ kv('GCP_BUCKET_NAME') }}/{{ vars.file }}"
  execution_time: "{{ execution.startDate }}"
  data: "{{ outputs.dept_iter_request }}"
  table: "staging_metropolitan"



tasks:

- id: create_metropolitan_table
  type: io.kestra.plugin.gcp.bigquery.Query
  sql: |
    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`
    (
      md5id STRING,
      objectID INT64,
      isHighlight BOOL,
      accessionNumber STRING,
      accessionYear STRING,
      isPublicDomain BOOL,
      primaryImage STRING,
      primaryImageSmall STRING,
      additionalImages STRING,
      constituents STRING,
      department STRING,
      objectName STRING,
      title STRING,
      culture STRING,
      period STRING,
      dynasty STRING,
      reign STRING,
      portfolio STRING,
      artistRole STRING,
      artistPrefix STRING,
      artistDisplayName STRING,
      artistDisplayBio STRING,
      artistSuffix STRING,
      artistAlphaSort STRING,
      artistNationality STRING,
      artistBeginDate STRING,
      artistEndDate STRING,
      artistGender STRING,
      artistWikidata_URL STRING,
      artistULAN_URL STRING,
      objectDate STRING,
      objectBeginDate INT64,
      objectEndDate INT64,
      medium STRING,
      dimensions STRING,
      dimensionsParsed STRING,
      measurements STRING,
      creditLine STRING,
      geographyType STRING,
      city STRING,
      state STRING,
      county STRING,
      country STRING,
      region STRING,
      subregion STRING,
      locale STRING,
      locus STRING,
      excavation STRING,
      river STRING,
      classification STRING,
      rightsAndReproduction STRING,
      linkResource STRING,
      metadataDate STRING,
      repository STRING,
      objectURL STRING,
      tags STRING,
      objectWikidata_URL STRING,
      isTimelineWork STRING,
      GalleryNumber STRING,
      BatchTimestamp timestamp default current_timestamp
    )  
    CLUSTER BY department;


        

- id: met_staging_ext
  type: io.kestra.plugin.gcp.bigquery.Query
  sql: |

    CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_ext`
    (
      md5id STRING,
      objectID INT64,
      isHighlight BOOL,
      accessionNumber STRING,
      accessionYear STRING,
      isPublicDomain BOOL,
      primaryImage STRING,
      primaryImageSmall STRING,
      additionalImages STRING,
      constituents STRING,
      department STRING,
      objectName STRING,
      title STRING,
      culture STRING,
      period STRING,
      dynasty STRING,
      reign STRING,
      portfolio STRING,
      artistRole STRING,
      artistPrefix STRING,
      artistDisplayName STRING,
      artistDisplayBio STRING,
      artistSuffix STRING,
      artistAlphaSort STRING,
      artistNationality STRING,
      artistBeginDate STRING,
      artistEndDate STRING,
      artistGender STRING,
      artistWikidata_URL STRING,
      artistULAN_URL STRING,
      objectDate STRING,
      objectBeginDate INT64,
      objectEndDate INT64,
      medium STRING,
      dimensions STRING,
      dimensionsParsed STRING,
      measurements STRING,
      creditLine STRING,
      geographyType STRING,
      city STRING,
      state STRING,
      county STRING,
      country STRING,
      region STRING,
      subregion STRING,
      locale STRING,
      locus STRING,
      excavation STRING,
      river STRING,
      classification STRING,
      rightsAndReproduction STRING,
      linkResource STRING,
      metadataDate STRING,
      repository STRING,
      objectURL STRING,
      tags STRING,
      objectWikidata_URL STRING,
      isTimelineWork STRING,
      GalleryNumber STRING
    )
    OPTIONS (
      format = 'parquet',
      uris = ['{{render(vars.gcs_file)}}']
    );

   

- id: met_staging_merge
  type: io.kestra.plugin.gcp.bigquery.Query
  sql: |
    MERGE INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}` T
    USING `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_ext` S
    ON T.md5id = S.md5id

    WHEN MATCHED THEN
    UPDATE SET
      T.isHighlight = S.isHighlight,
      T.accessionNumber = trim(S.accessionNumber),
      T.accessionYear = trim(S.accessionYear),
      T.isPublicDomain = S.isPublicDomain,
      T.primaryImage = trim(S.primaryImage),
      T.primaryImageSmall = trim(S.primaryImageSmall),
      T.additionalImages = trim(S.additionalImages),
      T.constituents = trim(S.constituents),
      T.department = trim(S.department),
      T.objectName = trim(S.objectName),
      T.title = trim(S.title),
      T.culture = trim(S.culture),
      T.period = trim(S.period),
      T.dynasty = trim(S.dynasty),
      T.reign = trim(S.reign),
      T.portfolio = trim(S.portfolio),
      T.artistRole = trim(S.artistRole),
      T.artistPrefix = trim(S.artistPrefix),
      T.artistDisplayName = trim(S.artistDisplayName),
      T.artistDisplayBio = trim(S.artistDisplayBio),
      T.artistSuffix = trim(S.artistSuffix),
      T.artistAlphaSort = trim(S.artistAlphaSort),
      T.artistNationality = trim(S.artistNationality),
      T.artistBeginDate = trim(S.artistBeginDate),
      T.artistEndDate = trim(S.artistEndDate),
      T.artistGender = trim(S.artistGender),
      T.artistWikidata_URL = trim(S.artistWikidata_URL),
      T.artistULAN_URL = trim(S.artistULAN_URL),
      T.objectDate = trim(S.objectDate),
      T.objectBeginDate = S.objectBeginDate,
      T.objectEndDate = S.objectEndDate,
      T.medium = trim(S.medium),
      T.dimensions = trim(S.dimensions),
      T.dimensionsParsed = trim(S.dimensionsParsed),
      T.measurements = trim(S.measurements),
      T.creditLine = trim(S.creditLine),
      T.geographyType = trim(S.geographyType),
      T.city = trim(S.city),
      T.state = trim(S.state),
      T.county = trim(S.county),
      T.country = trim(S.country),
      T.region = trim(S.region),
      T.subregion = trim(S.subregion),
      T.locale = trim(S.locale),
      T.locus = trim(S.locus),
      T.excavation = trim(S.excavation),
      T.river = trim(S.river),
      T.classification = trim(S.classification),
      T.rightsAndReproduction = trim(S.rightsAndReproduction),
      T.linkResource = trim(S.linkResource),
      T.metadataDate = trim(S.metadataDate),
      T.repository = trim(S.repository),
      T.objectURL = trim(S.objectURL),
      T.tags = trim(S.tags),
      T.objectWikidata_URL = trim(S.objectWikidata_URL),
      T.isTimelineWork = trim(S.isTimelineWork),
      T.GalleryNumber = trim(S.GalleryNumber)

    WHEN NOT MATCHED THEN
    INSERT (
      md5id, objectID, isHighlight, accessionNumber, accessionYear, isPublicDomain,
      primaryImage, primaryImageSmall, additionalImages, constituents, department,
      objectName, title, culture, period, dynasty, reign, portfolio, artistRole,
      artistPrefix, artistDisplayName, artistDisplayBio, artistSuffix, artistAlphaSort,
      artistNationality, artistBeginDate, artistEndDate, artistGender, artistWikidata_URL,
      artistULAN_URL, objectDate, objectBeginDate, objectEndDate, medium, dimensions,
      dimensionsParsed, measurements, creditLine, geographyType, city, state, county,
      country, region, subregion, locale, locus, excavation, river, classification,
      rightsAndReproduction, linkResource, metadataDate, repository, objectURL, tags,
      objectWikidata_URL, isTimelineWork, GalleryNumber
    )
    VALUES (
      S.md5id, S.objectID, S.isHighlight, trim(S.accessionNumber), trim(S.accessionYear), S.isPublicDomain,
      trim(S.primaryImage), trim(S.primaryImageSmall), trim(S.additionalImages), trim(S.constituents),
      trim(S.department), trim(S.objectName), trim(S.title), trim(S.culture), trim(S.period),
      trim(S.dynasty), trim(S.reign), trim(S.portfolio), trim(S.artistRole), trim(S.artistPrefix),
      trim(S.artistDisplayName), trim(S.artistDisplayBio), trim(S.artistSuffix), trim(S.artistAlphaSort),
      trim(S.artistNationality), trim(S.artistBeginDate), trim(S.artistEndDate), trim(S.artistGender),
      trim(S.artistWikidata_URL), trim(S.artistULAN_URL), trim(S.objectDate), S.objectBeginDate,
      S.objectEndDate, trim(S.medium), trim(S.dimensions), trim(S.dimensionsParsed), trim(S.measurements),
      trim(S.creditLine), trim(S.geographyType), trim(S.city), trim(S.state), trim(S.county),
      trim(S.country), trim(S.region), trim(S.subregion), trim(S.locale), trim(S.locus),
      trim(S.excavation), trim(S.river), trim(S.classification), trim(S.rightsAndReproduction),
      trim(S.linkResource), trim(S.metadataDate), trim(S.repository), trim(S.objectURL),
      trim(S.tags), trim(S.objectWikidata_URL), trim(S.isTimelineWork), trim(S.GalleryNumber)
    );

  disabled: FALSE


- id: create_metropolitan_tables_per_topic
  type: io.kestra.plugin.gcp.bigquery.Query
  sql: |
    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork`
    (
      md5id STRING,
      objectID INT64,
      objectName STRING,
      objectURL STRING,
      artistDisplayName STRING,
      artistRole STRING,
      title STRING,
      isHighlight BOOL,
      objectDate STRING,
      objectBeginDate INT64,
      objectEndDate INT64,
      medium STRING,
      classification STRING,
      portfolio STRING,
      dimensions STRING,
      dimensionsParsed STRING,
      measurements STRING,
      BatchTimestamp timestamp 
      );

    
    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_images`
    (
      md5id STRING,
      objectID INT64,
      primaryImage STRING,
      primaryImageSmall STRING,
      additionalImages STRING,
      BatchTimestamp timestamp default current_timestamp
    );

    

    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_administrative`
    (
      md5id STRING,
      objectID INT64,
      accessionNumber STRING,
      accessionYear STRING,
      isPublicDomain BOOL,
      constituents STRING,
      portfolio STRING,
      creditLine STRING,
      rightsAndReproduction STRING,
      linkResource STRING,
      metadataDate STRING,
      repository STRING,
      objectURL STRING,
      tags STRING,
      objectWikidata_URL STRING,
      isTimelineWork STRING,
      GalleryNumber STRING,
      BatchTimestamp timestamp default current_timestamp
      );

      
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_geopolitical`
    (
      md5id STRING,
      objectID INT64,
      department STRING,
      culture STRING,
      artistNationality STRING,
      period STRING,
      dynasty STRING,
      reign STRING,
      geographyType STRING,
      city STRING,
      state STRING,
      county STRING,
      country STRING,
      region STRING,
      subregion STRING,
      locale STRING,
      locus STRING,
      excavation STRING,
      river STRING,
      BatchTimestamp timestamp default current_timestamp
      );

      

      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork_artist`
    (
      md5id STRING,
      objectID INT64,
      artistDisplayName STRING,
      artistRole STRING,
      artistPrefix STRING,
      artistDisplayBio STRING,
      artistSuffix STRING,
      artistAlphaSort STRING,
      artistNationality STRING,
      artistBeginDate STRING,
      artistEndDate STRING,
      artistGender STRING,
      artistWikidata_URL STRING,
      artistULAN_URL STRING,
      BatchTimestamp timestamp default current_timestamp
      );

      

      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artists`
      (
      artistmd5id STRING,
      artistDisplayName STRING,
      artistRole STRING,
      artistPrefix STRING,
      artistDisplayBio STRING,
      artistSuffix STRING,
      artistAlphaSort STRING,
      artistNationality STRING,
      artistBeginDate STRING,
      artistEndDate STRING,
      artistGender STRING,
      artistWikidata_URL STRING,
      artistULAN_URL STRING,
      BatchTimestamp timestamp default current_timestamp
      );

      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_tags`
      (
      md5id STRING,
      objectID int64,
      term STRING,
      AAT_URL STRING,
      Wikidata_URL STRING,
      BatchTimestamp timestamp default current_timestamp
      );







- id: populate_metropolitan_tables_per_topic
  type: io.kestra.plugin.gcp.bigquery.Query
  sql: |

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork`
      (
      md5id, objectID, objectName, objectURL, artistDisplayName, artistRole, title, isHighlight,
      objectDate, objectBeginDate, objectEndDate, medium, classification, portfolio,
      dimensions, dimensionsParsed, measurements, BatchTimestamp
      )
      SELECT
      md5id, objectID, objectName, objectURL, artistDisplayName, artistRole,title, isHighlight,
      objectDate, objectBeginDate, objectEndDate, medium, classification, portfolio,
      dimensions, dimensionsParsed, measurements, CURRENT_TIMESTAMP()
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_images`
      (
      md5id, objectID, primaryImage, primaryImageSmall, additionalImages, BatchTimestamp
      )
      SELECT
      md5id, objectID, primaryImage, primaryImageSmall, additionalImages, CURRENT_TIMESTAMP()
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_administrative`
      (
      md5id, objectID, accessionNumber, accessionYear, isPublicDomain, constituents, portfolio,
      creditLine, rightsAndReproduction, linkResource, metadataDate, repository, objectURL,
      tags, objectWikidata_URL, isTimelineWork, GalleryNumber, BatchTimestamp
      )
      SELECT
      md5id, objectID, accessionNumber, accessionYear, isPublicDomain, constituents, portfolio,
      creditLine, rightsAndReproduction, linkResource, metadataDate, repository, objectURL,
      tags, objectWikidata_URL, isTimelineWork, GalleryNumber, CURRENT_TIMESTAMP()
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_geopolitical`
      (
      md5id, objectID, department, culture, artistNationality, period, dynasty, reign,
      geographyType, city, state, county, country, region, subregion, locale, locus,
      excavation, river, BatchTimestamp
      )
      SELECT
      md5id, objectID, department, culture, artistNationality, period, dynasty, reign,
      geographyType, city, state, county, country, region, subregion, locale, locus,
      excavation, river, CURRENT_TIMESTAMP()
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork_artist`
      (
      md5id, objectID, artistDisplayName, artistRole, artistPrefix, artistDisplayBio,
      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,
      artistGender, artistWikidata_URL, artistULAN_URL, BatchTimestamp
      )
      SELECT
      md5id, objectID, artistDisplayName, artistRole, artistPrefix, artistDisplayBio,
      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,
      artistGender, artistWikidata_URL, artistULAN_URL, CURRENT_TIMESTAMP()
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artists`
      (
      artistmd5id, artistDisplayName, artistPrefix, artistDisplayBio,
      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,
      artistGender, artistWikidata_URL, artistULAN_URL, BatchTimestamp
      )
      
      SELECT 
          TO_HEX(MD5(CONCAT( 
                IFNULL(artistDisplayName,''), 
                IFNULL(artistPrefix,''), 
                IFNULL(artistDisplayBio,''),
                IFNULL(artistSuffix,''), 
                IFNULL(artistAlphaSort,''), 
                IFNULL(artistNationality,''), 
                IFNULL(artistBeginDate,''), 
                IFNULL(artistEndDate,''),
                IFNULL(artistGender,''), 
                IFNULL(artistWikidata_URL,''), 
                IFNULL(artistULAN_URL, '')
                ))) AS artistmd5id, 
      ANY_VALUE(artistDisplayName), 
      ANY_VALUE(artistPrefix), 
      ANY_VALUE(artistDisplayBio),
      ANY_VALUE(artistSuffix), 
      ANY_VALUE(artistAlphaSort), 
      ANY_VALUE(artistNationality), 
      ANY_VALUE(artistBeginDate), 
      ANY_VALUE(artistEndDate),
      ANY_VALUE(artistGender), 
      ANY_VALUE(artistWikidata_URL), 
      ANY_VALUE(artistULAN_URL), 
      CURRENT_TIMESTAMP()
      
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`
      GROUP BY artistmd5id;

      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan_tags` (
        md5id, objectID, term, AAT_URL, Wikidata_URL
      )
      SELECT DISTINCT
        TO_HEX(MD5(CONCAT(CAST(objectID AS STRING), JSON_VALUE(tag, '$.term')))) AS md5id,
        objectID,
        JSON_VALUE(tag, '$.term') AS term,
        JSON_VALUE(tag, '$.AAT_URL') AS AAT_URL,
        JSON_VALUE(tag, '$.Wikidata_URL') AS Wikidata_URL
      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan`,
      UNNEST(JSON_EXTRACT_ARRAY(tags)) AS tag
      WHERE tags IS NOT NULL;









pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{ kv('GCP_CREDS') }}"
      projectId: "{{ kv('GCP_PROJECT_ID') }}"
      location: "{{ kv('GCP_LOCATION') }}"
      bucket: "{{ kv('GCP_BUCKET_NAME') }}"




triggers:  
  - id: upstream_dependancy    
    type: io.kestra.plugin.core.trigger.Flow    
    preconditions:      
      id: flow_trigger      
      flows:        
        - namespace: qr_art_gallery          
          flowId: from_met_api_to_bucket          
          states: [SUCCESS]
    disabled: false
