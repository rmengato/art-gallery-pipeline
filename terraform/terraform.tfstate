{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 12,
  "lineage": "19bdb475-65be-5e54-b706-6461a4e79891",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "kestra_flow",
      "name": "from_bucket_to_staging",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "id: from_bucket_to_staging\nnamespace: qr_art_gallery\ndescription: |\n  Extracts data from the Metropolitan Museum of NY API loaded into GCS bucket and moves it into staging table in BigQuery\n\n\nvariables:\n  file: \"metropolitan_{{ execution.startDate | date('EEE') }}_{{ execution.startDate | date('yyyy-MM-dd') }}.parquet\"\n  gcs_file: \"gs://{{ kv('GCP_BUCKET_NAME') }}/{{ vars.file }}\"\n  execution_time: \"{{ execution.startDate }}\"\n  data: \"{{ outputs.dept_iter_request }}\"\n  table: \"staging_metropolitan\"\n\n\n\ntasks:\n\n- id: create_metropolitan_table\n  type: io.kestra.plugin.gcp.bigquery.Query\n  sql: |\n    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`\n    (\n      md5id STRING,\n      objectID INT64,\n      isHighlight BOOL,\n      accessionNumber STRING,\n      accessionYear STRING,\n      isPublicDomain BOOL,\n      primaryImage STRING,\n      primaryImageSmall STRING,\n      additionalImages STRING,\n      constituents STRING,\n      department STRING,\n      objectName STRING,\n      title STRING,\n      culture STRING,\n      period STRING,\n      dynasty STRING,\n      reign STRING,\n      portfolio STRING,\n      artistRole STRING,\n      artistPrefix STRING,\n      artistDisplayName STRING,\n      artistDisplayBio STRING,\n      artistSuffix STRING,\n      artistAlphaSort STRING,\n      artistNationality STRING,\n      artistBeginDate STRING,\n      artistEndDate STRING,\n      artistGender STRING,\n      artistWikidata_URL STRING,\n      artistULAN_URL STRING,\n      objectDate STRING,\n      objectBeginDate INT64,\n      objectEndDate INT64,\n      medium STRING,\n      dimensions STRING,\n      dimensionsParsed STRING,\n      measurements STRING,\n      creditLine STRING,\n      geographyType STRING,\n      city STRING,\n      state STRING,\n      county STRING,\n      country STRING,\n      region STRING,\n      subregion STRING,\n      locale STRING,\n      locus STRING,\n      excavation STRING,\n      river STRING,\n      classification STRING,\n      rightsAndReproduction STRING,\n      linkResource STRING,\n      metadataDate STRING,\n      repository STRING,\n      objectURL STRING,\n      tags STRING,\n      objectWikidata_URL STRING,\n      isTimelineWork STRING,\n      GalleryNumber STRING,\n      BatchTimestamp timestamp default current_timestamp\n    )  \n    CLUSTER BY department;\n\n\n        \n\n- id: met_staging_ext\n  type: io.kestra.plugin.gcp.bigquery.Query\n  sql: |\n\n    CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_ext`\n    (\n      md5id STRING,\n      objectID INT64,\n      isHighlight BOOL,\n      accessionNumber STRING,\n      accessionYear STRING,\n      isPublicDomain BOOL,\n      primaryImage STRING,\n      primaryImageSmall STRING,\n      additionalImages STRING,\n      constituents STRING,\n      department STRING,\n      objectName STRING,\n      title STRING,\n      culture STRING,\n      period STRING,\n      dynasty STRING,\n      reign STRING,\n      portfolio STRING,\n      artistRole STRING,\n      artistPrefix STRING,\n      artistDisplayName STRING,\n      artistDisplayBio STRING,\n      artistSuffix STRING,\n      artistAlphaSort STRING,\n      artistNationality STRING,\n      artistBeginDate STRING,\n      artistEndDate STRING,\n      artistGender STRING,\n      artistWikidata_URL STRING,\n      artistULAN_URL STRING,\n      objectDate STRING,\n      objectBeginDate INT64,\n      objectEndDate INT64,\n      medium STRING,\n      dimensions STRING,\n      dimensionsParsed STRING,\n      measurements STRING,\n      creditLine STRING,\n      geographyType STRING,\n      city STRING,\n      state STRING,\n      county STRING,\n      country STRING,\n      region STRING,\n      subregion STRING,\n      locale STRING,\n      locus STRING,\n      excavation STRING,\n      river STRING,\n      classification STRING,\n      rightsAndReproduction STRING,\n      linkResource STRING,\n      metadataDate STRING,\n      repository STRING,\n      objectURL STRING,\n      tags STRING,\n      objectWikidata_URL STRING,\n      isTimelineWork STRING,\n      GalleryNumber STRING\n    )\n    OPTIONS (\n      format = 'parquet',\n      uris = ['{{render(vars.gcs_file)}}']\n    );\n\n   \n\n- id: met_staging_merge\n  type: io.kestra.plugin.gcp.bigquery.Query\n  sql: |\n    MERGE INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}` T\n    USING `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_ext` S\n    ON T.md5id = S.md5id\n\n    WHEN MATCHED THEN\n    UPDATE SET\n      T.isHighlight = S.isHighlight,\n      T.accessionNumber = trim(S.accessionNumber),\n      T.accessionYear = trim(S.accessionYear),\n      T.isPublicDomain = S.isPublicDomain,\n      T.primaryImage = trim(S.primaryImage),\n      T.primaryImageSmall = trim(S.primaryImageSmall),\n      T.additionalImages = trim(S.additionalImages),\n      T.constituents = trim(S.constituents),\n      T.department = trim(S.department),\n      T.objectName = trim(S.objectName),\n      T.title = trim(S.title),\n      T.culture = trim(S.culture),\n      T.period = trim(S.period),\n      T.dynasty = trim(S.dynasty),\n      T.reign = trim(S.reign),\n      T.portfolio = trim(S.portfolio),\n      T.artistRole = trim(S.artistRole),\n      T.artistPrefix = trim(S.artistPrefix),\n      T.artistDisplayName = trim(S.artistDisplayName),\n      T.artistDisplayBio = trim(S.artistDisplayBio),\n      T.artistSuffix = trim(S.artistSuffix),\n      T.artistAlphaSort = trim(S.artistAlphaSort),\n      T.artistNationality = trim(S.artistNationality),\n      T.artistBeginDate = trim(S.artistBeginDate),\n      T.artistEndDate = trim(S.artistEndDate),\n      T.artistGender = trim(S.artistGender),\n      T.artistWikidata_URL = trim(S.artistWikidata_URL),\n      T.artistULAN_URL = trim(S.artistULAN_URL),\n      T.objectDate = trim(S.objectDate),\n      T.objectBeginDate = S.objectBeginDate,\n      T.objectEndDate = S.objectEndDate,\n      T.medium = trim(S.medium),\n      T.dimensions = trim(S.dimensions),\n      T.dimensionsParsed = trim(S.dimensionsParsed),\n      T.measurements = trim(S.measurements),\n      T.creditLine = trim(S.creditLine),\n      T.geographyType = trim(S.geographyType),\n      T.city = trim(S.city),\n      T.state = trim(S.state),\n      T.county = trim(S.county),\n      T.country = trim(S.country),\n      T.region = trim(S.region),\n      T.subregion = trim(S.subregion),\n      T.locale = trim(S.locale),\n      T.locus = trim(S.locus),\n      T.excavation = trim(S.excavation),\n      T.river = trim(S.river),\n      T.classification = trim(S.classification),\n      T.rightsAndReproduction = trim(S.rightsAndReproduction),\n      T.linkResource = trim(S.linkResource),\n      T.metadataDate = trim(S.metadataDate),\n      T.repository = trim(S.repository),\n      T.objectURL = trim(S.objectURL),\n      T.tags = trim(S.tags),\n      T.objectWikidata_URL = trim(S.objectWikidata_URL),\n      T.isTimelineWork = trim(S.isTimelineWork),\n      T.GalleryNumber = trim(S.GalleryNumber)\n\n    WHEN NOT MATCHED THEN\n    INSERT (\n      md5id, objectID, isHighlight, accessionNumber, accessionYear, isPublicDomain,\n      primaryImage, primaryImageSmall, additionalImages, constituents, department,\n      objectName, title, culture, period, dynasty, reign, portfolio, artistRole,\n      artistPrefix, artistDisplayName, artistDisplayBio, artistSuffix, artistAlphaSort,\n      artistNationality, artistBeginDate, artistEndDate, artistGender, artistWikidata_URL,\n      artistULAN_URL, objectDate, objectBeginDate, objectEndDate, medium, dimensions,\n      dimensionsParsed, measurements, creditLine, geographyType, city, state, county,\n      country, region, subregion, locale, locus, excavation, river, classification,\n      rightsAndReproduction, linkResource, metadataDate, repository, objectURL, tags,\n      objectWikidata_URL, isTimelineWork, GalleryNumber\n    )\n    VALUES (\n      S.md5id, S.objectID, S.isHighlight, trim(S.accessionNumber), trim(S.accessionYear), S.isPublicDomain,\n      trim(S.primaryImage), trim(S.primaryImageSmall), trim(S.additionalImages), trim(S.constituents),\n      trim(S.department), trim(S.objectName), trim(S.title), trim(S.culture), trim(S.period),\n      trim(S.dynasty), trim(S.reign), trim(S.portfolio), trim(S.artistRole), trim(S.artistPrefix),\n      trim(S.artistDisplayName), trim(S.artistDisplayBio), trim(S.artistSuffix), trim(S.artistAlphaSort),\n      trim(S.artistNationality), trim(S.artistBeginDate), trim(S.artistEndDate), trim(S.artistGender),\n      trim(S.artistWikidata_URL), trim(S.artistULAN_URL), trim(S.objectDate), S.objectBeginDate,\n      S.objectEndDate, trim(S.medium), trim(S.dimensions), trim(S.dimensionsParsed), trim(S.measurements),\n      trim(S.creditLine), trim(S.geographyType), trim(S.city), trim(S.state), trim(S.county),\n      trim(S.country), trim(S.region), trim(S.subregion), trim(S.locale), trim(S.locus),\n      trim(S.excavation), trim(S.river), trim(S.classification), trim(S.rightsAndReproduction),\n      trim(S.linkResource), trim(S.metadataDate), trim(S.repository), trim(S.objectURL),\n      trim(S.tags), trim(S.objectWikidata_URL), trim(S.isTimelineWork), trim(S.GalleryNumber)\n    );\n\n  disabled: FALSE\n\n\n- id: create_metropolitan_tables_per_topic\n  type: io.kestra.plugin.gcp.bigquery.Query\n  sql: |\n    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork`\n    (\n      md5id STRING,\n      objectID INT64,\n      objectName STRING,\n      objectURL STRING,\n      artistDisplayName STRING,\n      artistRole STRING,\n      title STRING,\n      isHighlight BOOL,\n      objectDate STRING,\n      objectBeginDate INT64,\n      objectEndDate INT64,\n      medium STRING,\n      classification STRING,\n      portfolio STRING,\n      dimensions STRING,\n      dimensionsParsed STRING,\n      measurements STRING,\n      BatchTimestamp timestamp \n      );\n\n    \n    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_images`\n    (\n      md5id STRING,\n      objectID INT64,\n      primaryImage STRING,\n      primaryImageSmall STRING,\n      additionalImages STRING,\n      BatchTimestamp timestamp default current_timestamp\n    );\n\n    \n\n    CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_administrative`\n    (\n      md5id STRING,\n      objectID INT64,\n      accessionNumber STRING,\n      accessionYear STRING,\n      isPublicDomain BOOL,\n      constituents STRING,\n      portfolio STRING,\n      creditLine STRING,\n      rightsAndReproduction STRING,\n      linkResource STRING,\n      metadataDate STRING,\n      repository STRING,\n      objectURL STRING,\n      tags STRING,\n      objectWikidata_URL STRING,\n      isTimelineWork STRING,\n      GalleryNumber STRING,\n      BatchTimestamp timestamp default current_timestamp\n      );\n\n      \n      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_geopolitical`\n    (\n      md5id STRING,\n      objectID INT64,\n      department STRING,\n      culture STRING,\n      artistNationality STRING,\n      period STRING,\n      dynasty STRING,\n      reign STRING,\n      geographyType STRING,\n      city STRING,\n      state STRING,\n      county STRING,\n      country STRING,\n      region STRING,\n      subregion STRING,\n      locale STRING,\n      locus STRING,\n      excavation STRING,\n      river STRING,\n      BatchTimestamp timestamp default current_timestamp\n      );\n\n      \n\n      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork_artist`\n    (\n      md5id STRING,\n      objectID INT64,\n      artistDisplayName STRING,\n      artistRole STRING,\n      artistPrefix STRING,\n      artistDisplayBio STRING,\n      artistSuffix STRING,\n      artistAlphaSort STRING,\n      artistNationality STRING,\n      artistBeginDate STRING,\n      artistEndDate STRING,\n      artistGender STRING,\n      artistWikidata_URL STRING,\n      artistULAN_URL STRING,\n      BatchTimestamp timestamp default current_timestamp\n      );\n\n      \n\n      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artists`\n      (\n      artistmd5id STRING,\n      artistDisplayName STRING,\n      artistRole STRING,\n      artistPrefix STRING,\n      artistDisplayBio STRING,\n      artistSuffix STRING,\n      artistAlphaSort STRING,\n      artistNationality STRING,\n      artistBeginDate STRING,\n      artistEndDate STRING,\n      artistGender STRING,\n      artistWikidata_URL STRING,\n      artistULAN_URL STRING,\n      BatchTimestamp timestamp default current_timestamp\n      );\n\n      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_tags`\n      (\n      md5id STRING,\n      objectID int64,\n      term STRING,\n      AAT_URL STRING,\n      Wikidata_URL STRING,\n      BatchTimestamp timestamp default current_timestamp\n      );\n\n\n\n\n\n\n\n- id: populate_metropolitan_tables_per_topic\n  type: io.kestra.plugin.gcp.bigquery.Query\n  sql: |\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork`\n      (\n      md5id, objectID, objectName, objectURL, artistDisplayName, artistRole, title, isHighlight,\n      objectDate, objectBeginDate, objectEndDate, medium, classification, portfolio,\n      dimensions, dimensionsParsed, measurements, BatchTimestamp\n      )\n      SELECT\n      md5id, objectID, objectName, objectURL, artistDisplayName, artistRole,title, isHighlight,\n      objectDate, objectBeginDate, objectEndDate, medium, classification, portfolio,\n      dimensions, dimensionsParsed, measurements, CURRENT_TIMESTAMP()\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_images`\n      (\n      md5id, objectID, primaryImage, primaryImageSmall, additionalImages, BatchTimestamp\n      )\n      SELECT\n      md5id, objectID, primaryImage, primaryImageSmall, additionalImages, CURRENT_TIMESTAMP()\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_administrative`\n      (\n      md5id, objectID, accessionNumber, accessionYear, isPublicDomain, constituents, portfolio,\n      creditLine, rightsAndReproduction, linkResource, metadataDate, repository, objectURL,\n      tags, objectWikidata_URL, isTimelineWork, GalleryNumber, BatchTimestamp\n      )\n      SELECT\n      md5id, objectID, accessionNumber, accessionYear, isPublicDomain, constituents, portfolio,\n      creditLine, rightsAndReproduction, linkResource, metadataDate, repository, objectURL,\n      tags, objectWikidata_URL, isTimelineWork, GalleryNumber, CURRENT_TIMESTAMP()\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_geopolitical`\n      (\n      md5id, objectID, department, culture, artistNationality, period, dynasty, reign,\n      geographyType, city, state, county, country, region, subregion, locale, locus,\n      excavation, river, BatchTimestamp\n      )\n      SELECT\n      md5id, objectID, department, culture, artistNationality, period, dynasty, reign,\n      geographyType, city, state, county, country, region, subregion, locale, locus,\n      excavation, river, CURRENT_TIMESTAMP()\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artwork_artist`\n      (\n      md5id, objectID, artistDisplayName, artistRole, artistPrefix, artistDisplayBio,\n      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,\n      artistGender, artistWikidata_URL, artistULAN_URL, BatchTimestamp\n      )\n      SELECT\n      md5id, objectID, artistDisplayName, artistRole, artistPrefix, artistDisplayBio,\n      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,\n      artistGender, artistWikidata_URL, artistULAN_URL, CURRENT_TIMESTAMP()\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}_artists`\n      (\n      artistmd5id, artistDisplayName, artistPrefix, artistDisplayBio,\n      artistSuffix, artistAlphaSort, artistNationality, artistBeginDate, artistEndDate,\n      artistGender, artistWikidata_URL, artistULAN_URL, BatchTimestamp\n      )\n      \n      SELECT \n          TO_HEX(MD5(CONCAT( \n                IFNULL(artistDisplayName,''), \n                IFNULL(artistPrefix,''), \n                IFNULL(artistDisplayBio,''),\n                IFNULL(artistSuffix,''), \n                IFNULL(artistAlphaSort,''), \n                IFNULL(artistNationality,''), \n                IFNULL(artistBeginDate,''), \n                IFNULL(artistEndDate,''),\n                IFNULL(artistGender,''), \n                IFNULL(artistWikidata_URL,''), \n                IFNULL(artistULAN_URL, '')\n                ))) AS artistmd5id, \n      ANY_VALUE(artistDisplayName), \n      ANY_VALUE(artistPrefix), \n      ANY_VALUE(artistDisplayBio),\n      ANY_VALUE(artistSuffix), \n      ANY_VALUE(artistAlphaSort), \n      ANY_VALUE(artistNationality), \n      ANY_VALUE(artistBeginDate), \n      ANY_VALUE(artistEndDate),\n      ANY_VALUE(artistGender), \n      ANY_VALUE(artistWikidata_URL), \n      ANY_VALUE(artistULAN_URL), \n      CURRENT_TIMESTAMP()\n      \n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.{{render(vars.table)}}`\n      GROUP BY artistmd5id;\n\n      INSERT INTO `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan_tags` (\n        md5id, objectID, term, AAT_URL, Wikidata_URL\n      )\n      SELECT DISTINCT\n        TO_HEX(MD5(CONCAT(CAST(objectID AS STRING), JSON_VALUE(tag, '$.term')))) AS md5id,\n        objectID,\n        JSON_VALUE(tag, '$.term') AS term,\n        JSON_VALUE(tag, '$.AAT_URL') AS AAT_URL,\n        JSON_VALUE(tag, '$.Wikidata_URL') AS Wikidata_URL\n      FROM `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan`,\n      UNNEST(JSON_EXTRACT_ARRAY(tags)) AS tag\n      WHERE tags IS NOT NULL;\n\n\n\n\n\n\n\n\n\npluginDefaults:\n  - type: io.kestra.plugin.gcp\n    values:\n      serviceAccount: \"{{ kv('GCP_CREDS') }}\"\n      projectId: \"{{ kv('GCP_PROJECT_ID') }}\"\n      location: \"{{ kv('GCP_LOCATION') }}\"\n      bucket: \"{{ kv('GCP_BUCKET_NAME') }}\"\n\n\n\n\ntriggers:  \n  - id: upstream_dependancy    \n    type: io.kestra.plugin.core.trigger.Flow    \n    preconditions:      \n      id: flow_trigger      \n      flows:        \n        - namespace: qr_art_gallery          \n          flowId: from_met_api_to_bucket          \n          states: [SUCCESS]\n    disabled: false\n",
            "flow_id": "from_bucket_to_staging",
            "id": "qr_art_gallery/from_bucket_to_staging",
            "namespace": "qr_art_gallery",
            "revision": 1,
            "tenant_id": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kestra_flow",
      "name": "from_met_api_to_bucket",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "id: from_met_api_to_bucket\nnamespace: qr_art_gallery\ndescription: |\n  Extracts data from the Metropolitan Museum of NY API and loads it into GCS bucket\n\ninputs:\n  - id: all_departments\n    type: BOOLEAN\n    displayName: To get all departments, set to \"true\"\n    defaults: false\n    required: false\n\n\nvariables:\n  file: \"metropolitan_{{ execution.startDate | date('EEE') }}_{{ execution.startDate | date('yyyy-MM-dd') }}.parquet\"\n  gcs_file: \"gs://{{ kv('GCP_BUCKET_NAME') }}/{{ vars.file }}\"\n  execution_time: \"{{ execution.startDate }}\"\n  data: \"{{outputs.dept_iter_request.outputFiles['data.parquet']}}\"\n\n\n\ntasks:\n    \n\n  - id: python_requests\n    type: io.kestra.plugin.core.flow.WorkingDirectory\n    tasks:\n      - id: dept_iter_request\n        type: io.kestra.plugin.scripts.python.Script\n        warningOnStdErr: false\n        taskRunner:\n          type: io.kestra.plugin.scripts.runner.docker.Docker\n        containerImage: ghcr.io/kestra-io/pydata:latest\n        beforeCommands:\n        - pip install pandas dlt httpx aiolimiter\n        outputFiles:\n          - data.parquet\n        \n        script: |\n          \n          import pandas as pd \n          import numpy as np\n          \n          import time\n          import datetime\n          \n          import dlt\n          import httpx\n          from aiolimiter import AsyncLimiter\n          \n          import hashlib\n\n          current_time = datetime.datetime.utcnow()\n          weekday = current_time.weekday()\n\n          \n          df_request = pd.read_json(f\"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds\")\n          object_ids_list = df_request[\"objectIDs\"].tolist()\n          objects_weekly_split = np.array_split(object_ids_list,7)\n          todays_objects = objects_weekly_split[weekday].tolist()\n\n          \n          limiter = AsyncLimiter(max_rate=70, time_period=1)\n\n          \n          @dlt.transformer\n          async def metropolitan_request(id):\n            async with limiter:\n              async with httpx.AsyncClient() as client:\n                  r = await client.get(f\"https://collectionapi.metmuseum.org/public/collection/v1/objects/{id}\")\n                  return r.json()\n\n          retrieved_data = list(todays_objects | metropolitan_request())\n\n        \n          pandas_df = pd.DataFrame(retrieved_data)\n          \n\n          \n          def row_to_md5(row):\n            row_str = '|'.join(str(v) for v in row.values)\n            return hashlib.md5(row_str.encode()).hexdigest()\n\n          pandas_df['md5ID'] = pandas_df.apply(row_to_md5, axis=1)\n\n          \n          numeric_columns = ['objectID', 'objectBeginDate', 'objectEndDate']\n          for col in numeric_columns:\n            if col in pandas_df.columns:\n                pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\n\n          string_columns = [\n            'md5ID','accessionNumber', 'accessionYear', 'primaryImage', 'primaryImageSmall', 'additionalImages',\n            'constituents', 'department', 'objectName', 'title', 'culture', 'period', 'dynasty', 'reign',\n            'portfolio', 'artistRole', 'artistPrefix', 'artistDisplayName', 'artistDisplayBio', 'artistSuffix',\n            'artistAlphaSort', 'artistNationality', 'artistBeginDate', 'artistEndDate', 'artistGender',\n            'artistWikidata_URL', 'artistULAN_URL', 'objectDate', 'medium', 'dimensions', 'dimensionsParsed',\n            'measurements', 'creditLine', 'geographyType', 'city', 'state', 'county', 'country', 'region',\n            'subregion', 'locale', 'locus', 'excavation', 'river', 'classification', 'rightsAndReproduction',\n            'linkResource', 'metadataDate', 'repository', 'objectURL', 'tags', 'objectWikidata_URL',\n            'isTimelineWork', 'GalleryNumber'\n          ]\n          for col in string_columns:\n            if col in pandas_df.columns:\n                pandas_df[col] = pandas_df[col].astype(str)\n\n\n          pandas_df.to_parquet(\"data.parquet\", engine=\"pyarrow\", index=False)\n        \n                  \n  - id: upload_to_gcs\n    type: io.kestra.plugin.gcp.gcs.Upload\n    from: \"{{render(vars.data)}}\"\n    to: \"{{render(vars.gcs_file)}}\"\n\n\n  - id: purge_files\n    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles\n    description: To avoid cluttering your storage, we will remove the downloaded files\n\n\npluginDefaults:\n  - type: io.kestra.plugin.gcp\n    values:\n      serviceAccount: \"{{ kv('GCP_CREDS') }}\"\n      projectId: \"{{ kv('GCP_PROJECT_ID') }}\"\n      location: \"{{ kv('GCP_LOCATION') }}\"\n      bucket: \"{{ kv('GCP_BUCKET_NAME') }}\"\n\n\n\nretry:\n  behavior: RETRY_FAILED_TASK    \n  type: exponential    \n  interval: PT30S\n  delayFactor: 2    \n  maxAttempt: 5    \n  maxInterval: PT10M    \n  warningOnRetry: true\n\n\ntriggers:\n  - id: Monday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 1\"\n  \n  - id: Tuesday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 2\"\n  \n  - id: Wednesday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 3\"\n  \n  - id: Thursday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 4\"\n\n  - id: Friday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 5\"\n\n  - id: Saturday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 6\"\n\n  - id: Sunday\n    type: io.kestra.plugin.core.trigger.Schedule\n    cron: \"0 0 * * 7\"\n",
            "flow_id": "from_met_api_to_bucket",
            "id": "qr_art_gallery/from_met_api_to_bucket",
            "namespace": "qr_art_gallery",
            "revision": 1,
            "tenant_id": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kestra_flow",
      "name": "from_staging_to_transformed",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "id: from_staging_to_transformed\nnamespace: qr_art_gallery\n\nvariables:\n  table: \"metropolitan_qr_urls\"\n\n\ntasks:\n\n\n\n  - id: select_urls\n    type: io.kestra.plugin.gcp.bigquery.Query\n    sql: |\n      SELECT\n        md5id, objectID, objectURL, primaryImageSmall\n      FROM  \n      `{{kv('GCP_PROJECT_ID')}}.qr_art_gallery_raw.staging_metropolitan`\n    fetch: true\n    disabled: false\n    \n  \n  - id: generate_qr_code_task\n    type: io.kestra.plugin.scripts.python.Script\n    warningOnStdErr: false\n    beforeCommands:\n      - printf '%s' '{{ kv(\"GCP_CREDS\") }}' \u003e /tmp/creds.json\n      - pip install pandas qrcode google-cloud-storage Pillow fastparquet numpy\n    script: |\n      import pandas as pd\n      import qrcode\n      import os\n      from google.cloud import storage\n      from io import BytesIO\n      import json\n      from google.oauth2 import service_account\n      import datetime\n      import numpy as np\n\n\n      current_time = datetime.datetime.utcnow()\n      weekday = current_time.weekday()\n\n      df_request = pd.read_json(f\"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds\")\n      object_ids_list = df_request[\"objectIDs\"].tolist()\n      objects_weekly_split = np.array_split(object_ids_list,7)\n      todays_objects = objects_weekly_split[weekday].tolist()\n\n      with open(\"/tmp/creds.json\") as f:\n        gcp_svc_info = json.load(f)\n\n      data = json.loads(\"\"\"{{ outputs.select_urls[\"rows\"] }}\"\"\")\n      df = pd.DataFrame(data)\n      df = df[df[\"objectID\"].isin(todays_objects)]\n\n      credentials = service_account.Credentials.from_service_account_info(gcp_svc_info)\n\n      client = storage.Client(credentials=credentials, project=\"{{ kv('GCP_PROJECT_ID') }}\")\n      bucket_name = \"{{ kv('GCP_BUCKET_NAME')}}\"\n      bucket = client.bucket(\"{{ kv('GCP_BUCKET_NAME') }}\")\n\n      existing_qr_blobs = client.list_blobs(bucket.name, prefix=\"qr_codes/\")\n      existing_qr_ids = {blob.name.split(\"/\")[-1].replace(\".png\", \"\") for blob in existing_qr_blobs}\n\n      def generate_qr_and_upload(row):\n        object_id_str = str(row[\"objectID\"])\n        if object_id_str in existing_qr_ids:\n          return f\"gs://{bucket_name}/qr_codes/{object_id_str}.png\"\n\n        qr = qrcode.make(row[\"objectURL\"])\n        img_buffer = BytesIO()\n        qr.save(img_buffer)\n        img_buffer.seek(0)\n\n        blob_path = f\"qr_codes/{object_id_str}.png\"\n        blob = bucket.blob(blob_path)\n        blob.upload_from_file(img_buffer, content_type=\"image/png\")\n\n        return f\"gs://{bucket_name}/{blob_path}\"\n\n\n      df[\"objectQr\"] = df.apply(generate_qr_and_upload, axis=1)\n      df.to_parquet(\"highlighted_with_qr.parquet\", engine=\"fastparquet\", index=False)\n    outputFiles:\n    - highlighted_with_qr.parquet\n    disabled: true\n\n\n\n\n  - id: generate_clusters\n    type: io.kestra.plugin.scripts.python.Script\n    warningOnStdErr: false\n    beforeCommands:\n      - printf '%s' '{{ kv(\"GCP_CREDS\") }}' \u003e /tmp/creds.json\n      - pip install numpy pandas Pillow scikit-learn aiolimiter dlt httpx numpy\n    script: |\n      from PIL import Image\n      import numpy as np\n      import io\n      from sklearn.cluster import MiniBatchKMeans\n      from aiolimiter import AsyncLimiter\n      import dlt\n      import httpx\n\n      current_time = datetime.datetime.utcnow()\n      weekday = current_time.weekday()\n\n      df_request = pd.read_json(f\"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds\")\n      object_ids_list = df_request[\"objectIDs\"].tolist()\n      objects_weekly_split = np.array_split(object_ids_list,7)\n      todays_objects = objects_weekly_split[weekday].tolist()\n\n\n      data = json.loads(\"\"\"{{ outputs.select_urls[\"rows\"] }}\"\"\")\n      pandas_df = pd.DataFrame(data)\n      pandas_df = pandas_df[pandas_df[\"objectID\"].isin(todays_objects)]\n\n\n      small_images = pandas_df[[\"md5_id\", \"objectID\", \"primaryImageSmall\"]]\n      small_images = small_images[small_images[\"primaryImageSmall\"].str.strip() != \"\"]\n      small_images_dicts = [{\n              \"objectID\": row[\"objectID\"],\n              \"md5id\": row[\"md5id\"],\n              \"url\": row[\"primaryImageSmall\"]\n          }\n          for idx, row in small_images.iterrows()\n      ]\n\n\n      limiter = AsyncLimiter(max_rate=70, time_period=1)\n\n      @dlt.transformer\n      async def get_images(dict_entry):\n        async with limiter:\n          async with httpx.AsyncClient() as client:\n              r = await client.get(dict_entry[\"url\"])\n              img = Image.open(io.BytesIO(r.content)).convert(\"RGB\")\n              img_array = np.array(img)\n              return {\n                      \"objectID\": dict_entry[\"objectID\"],\n                      \"md5id\": dict_entry[\"md5id\"],\n                      \"primaryImageSmall\": dict_entry[\"url\"],\n                      \"image_array\": img_array\n                  }\n\n      pixels = list( [i for i in small_images_dicts] | get_images())\n\n\n      def get_clusters(entry, n_clusters = 5):\n        img_array = entry[\"image_array\"]\n        objectID = entry[\"objectID\"]\n        primaryImageSmall = entry[\"primaryImageSmall\"]\n        md5id = entry[\"md5id\"]\n\n        img_array = img_array.reshape(-1,3) / 255.0\n\n        kmeans = MiniBatchKMeans(n_clusters = n_clusters)\n        labels = kmeans.fit_predict(img_array)\n        centroids =  kmeans.cluster_centers_\n        proportions = np.bincount(labels, minlength=n_clusters) / len(labels)\n        counts = np.bincount(labels)\n        return {\"objectID\": objectID, \n                \"md5id\": md5id,\n                \"primaryImageSmall\": primaryImageSmall,\n                \"rgbColorCentroids\": centroids.tolist(), \n                \"colorLabelProportions\": proportions.tolist(), \n                \"colorLabelCounts\": counts.tolist()}\n\n      clusters = list(map(get_clusters, pixels))\n      images_df = pd.DataFrame(clusters)\n      images_df.to_parquet(\"clusters.parquet\", engine=\"fastparquet\", index=False)\n    outputFiles:\n    - clusters.parquet\n    disabled: true\n\n\n  - id: table_clusters_ext\n    type: io.kestra.plugin.gcp.bigquery.Query\n    sql: |\n      CREATE TABLE IF NOT EXISTS `{{ kv('GCP_PROJECT_ID') }}.qr_art_gallery_transformed.metropolitan_color_clusters`\n        (objectID STRING,\n        md5id STRING,\n        primaryImageSmall STRING,\n        rgbColorCentroids ARRAY\u003cARRAY\u003cFLOAT64\u003e\u003e,\n        colorLabelProportions ARRAY\u003cFLOAT64\u003e,\n        colorLabelCounts ARRAY\u003cINT64\u003e\n        )\n        OPTIONS (format = 'parquet',\n              uris = ['{{ outputs.generate_clusters.outputFiles['clusters.parquet'] }}']);\n    disabled: true\n\n\n\n\n  - id: git\n    type: io.kestra.plugin.core.flow.WorkingDirectory\n    tasks:\n    - id: clone_repository\n      type: io.kestra.plugin.git.Clone\n      url: https://github.com/rmengato/qr-art-gallery\n      branch: dbt_add\n\n    - id: dbt\n      type: io.kestra.plugin.dbt.cli.DbtCLI\n      inputFiles:\n        sa.json: \"{{ kv('GCP_CREDS') }}\"\n      taskRunner:\n        type: io.kestra.plugin.scripts.runner.docker.Docker\n      containerImage: ghcr.io/kestra-io/dbt-bigquery:latest\n      profiles: |\n        my-dbt-project:\n          outputs:\n            dev:\n              type: bigquery\n              method: service-account\n              project: \"{{ kv('GCP_PROJECT_ID')}}\"\n              dataset: \"qr_art_gallery_raw\"\n              location: \"{{ kv('GCP_LOCATION')}}\"\n              keyfile: sa.json\n              threads: 16\n              priority: interactive\n              timeout_seconds: 300\n              fixed_retries: 1\n          target: dev\n      commands:\n        - dbt deps\n        - dbt build --full-refresh\n    disabled: true\n\n\n\n\n  - id: table_highlights_with_qr_temp\n    type: io.kestra.plugin.gcp.bigquery.Query\n    sql: |\n      CREATE OR REPLACE TABLE `{{ kv('GCP_PROJECT_ID') }}.qr_art_gallery_transformed.metropolitan_qr_urls_temp`\n        (objectID STRING,\n         objectURL STRING,\n         objectQR STRING\n        )\n        OPTIONS (format = 'parquet',\n              uris = ['{{ outputs.generate_qr_code_task }}']);\n    disabled: true\n\n\n  \n\n \n\n  - id: purge_files\n    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles\n    description: If you'd like to explore Kestra outputs, disable it.\n    disabled: false\n\n\npluginDefaults:\n  - type: io.kestra.plugin.gcp\n    values:\n      serviceAccount: \"{{ kv('GCP_CREDS') }}\"\n      projectId: \"{{ kv('GCP_PROJECT_ID') }}\"\n      location: \"{{ kv('GCP_LOCATION') }}\"\n      bucket: \"{{ kv('GCP_BUCKET_NAME') }}\"\n\n\ntriggers:  \n  - id: upstream_dependency    \n    type: io.kestra.plugin.core.trigger.Flow    \n    preconditions:      \n      id: flow_trigger      \n      flows:        \n        - namespace: qr_art_gallery          \n          flowId: from_bucket_to_staging          \n          states: [SUCCESS]\n\n\n      ",
            "flow_id": "from_staging_to_transformed",
            "id": "qr_art_gallery/from_staging_to_transformed",
            "namespace": "qr_art_gallery",
            "revision": 1,
            "tenant_id": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kestra_kv",
      "name": "gcp_bucket_name",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "qr_art_gallery/GCP_BUCKET_NAME",
            "key": "GCP_BUCKET_NAME",
            "namespace": "qr_art_gallery",
            "tenant_id": "",
            "type": null,
            "value": "qr_art_gallery_zoom_bucket"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kestra_kv",
      "name": "gcp_location",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "qr_art_gallery/GCP_LOCATION",
            "key": "GCP_LOCATION",
            "namespace": "qr_art_gallery",
            "tenant_id": "",
            "type": null,
            "value": "europe-west2"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kestra_kv",
      "name": "gcp_project_id",
      "provider": "provider[\"registry.terraform.io/kestra-io/kestra\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "qr_art_gallery/GCP_PROJECT_ID",
            "key": "GCP_PROJECT_ID",
            "namespace": "qr_art_gallery",
            "tenant_id": "",
            "type": null,
            "value": "de-zoomcamp-rmengato"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}
